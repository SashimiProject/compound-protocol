-- NewComptroller, but with markets listed so that we can make them comp markets in constructor
Macro FlywheelComptroller price=1.0 borrowRate=0.000005 sashimiInitAmount=5000000e18
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    ----g2
    ComptrollerImpl Deploy ScenarioG2 ComptrollerScenG2
    Unitroller SetPendingImpl ComptrollerScenG2
    ComptrollerImpl ComptrollerScenG2 BecomeG2
    --list some tokens
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetMaxAssets 20
    Comptroller SetCloseFactor 0.5
    Comptroller LiquidationIncentive 1.1
    NewSLToken ZRX slZRX
    NewSLToken BAT slBAT
    Support slZRX collateralFactor:0.5
    Support slBAT collateralFactor:0.5
    -- final
    ComptrollerImpl Deploy ScenarioG3 ComptrollerScen
    Unitroller SetPendingImpl ComptrollerScen
    ComptrollerImpl ComptrollerScen BecomeG3 1e18 [slZRX slBAT]
    Erc20 Deploy Standard SASHIMI "SASHIMI Token" 18
    Give (Address Comptroller) sashimiInitAmount SASHIMI
    Comptroller Send "setSashimiAddress(address)" (Address SASHIMI)

Macro InitSpeeds
    Prep Geoff 100e18 ZRX slZRX
    Mint Geoff 50e18 slZRX--tokenbalance = 50e18 / 2e9 = 2.5e10
    Prep Coburn Some BAT slBAT
    Mint Coburn 6e18 slBAT--tokenbalance = 6e18 / 2e9 = 3e9
    EnterMarkets Coburn slBAT
    Borrow Coburn 1e18 slZRX
    Comptroller RefreshSashimiSpeeds

Test "Accrue SASHIMI during a mint"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    Mint Geoff 1e18 slZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    Assert Equal (Comptroller SashimiSupplyState slZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller SashimiSupplyState slZRX "block") 300000
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller SashimiSupplierIndex slZRX Geoff) 1.2000000000001e49

Test "Accrue SASHIMI during a borrow"
    FlywheelComptroller
    InitSpeeds
    Comptroller FastForward 300000 Blocks
    Assert Equal (Comptroller SashimiAccrued Coburn) 0
    Borrow Coburn 0.1e18 slZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 =  3.00001e41
    Assert Equal (Comptroller SashimiAccrued Coburn) 0
    Assert Equal (Comptroller SashimiBorrowState slZRX "index") 3.00001e41
    Assert Equal (Comptroller SashimiBorrowState slZRX "block") 300000
    Assert Equal (Erc20 SASHIMI TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller SashimiBorrowerIndex slZRX Coburn) 3.00001e41

Test "Accrue SASHIMI during a redeem"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    Redeem Geoff 1e9 slZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    Assert Equal (Comptroller SashimiSupplyState slZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller SashimiSupplyState slZRX "block") 300000
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller SashimiSupplierIndex slZRX Geoff) 1.2000000000001e49

Test "Accrue SASHIMI during a repayBorrow"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    Prep Coburn 0.5e18 ZRX slZRX
    RepayBorrow Coburn 0.5e18 slZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 =  3.00001e41
    Assert Equal (Comptroller SashimiAccrued Coburn) 0
    Assert Equal (Comptroller SashimiBorrowState slZRX "index") 3.00001e41
    Assert Equal (Comptroller SashimiBorrowState slZRX "block") 300000
    Assert Equal (Erc20 SASHIMI TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller SashimiBorrowerIndex slZRX Coburn) 3.00001e41

Test "Accrue SASHIMI during a repayBorrowBehalf of 0"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    -- confirm we can init all flywheel accounts for free
    RepayBorrowBehalf Jared Coburn 0 slZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 = 3.00001e41
    Assert Equal (Comptroller SashimiAccrued Coburn) 0
    Assert Equal (Comptroller SashimiBorrowState slZRX "index") 3.00001e41
    Assert Equal (Comptroller SashimiBorrowState slZRX "block") 300000
    Assert Equal (Erc20 SASHIMI TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller SashimiBorrowerIndex slZRX Coburn) 3.00001e41

Test "Accrue SASHIMI during a liquidation"
    FlywheelComptroller
    InitSpeeds
    Assert Equal (Comptroller SashimiSpeed slZRX) 1e18
    Assert Equal (Comptroller SashimiSpeed slBAT) 0
    --coburn zrx borrow, bat supply. geoff zrx supply
    FastForward 600000 Blocks--1e18 borrow * (1 + 600000 * 0.000005) = 3.5e18 borrow > 6e18 collateral * 0.5 CF
    Prep Geoff Some ZRX slZRX
    From Geoff (SLToken slZRX Liquidate Coburn slBAT 0.5e18)
    -- zrx borrow index is updated and comp distributed
    -- * new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- * new index = 1e36 + 600000 * 1e18 * 1e36 / 1e18 = 6.00001E41
    Assert Equal (Comptroller SashimiBorrowState slZRX "index") 6.00001e41
    Assert Equal (Comptroller SashimiBorrowState slZRX "block") 600000
    -- zrx supply index isnt updated and comp isnt distributed for zrx supply
    Assert Equal (Comptroller SashimiSupplyState slZRX "index") 1e36
    Assert Equal (Comptroller SashimiSupplyState slZRX "block") 0
    Assert Equal (Comptroller SashimiSupplierIndex slZRX Geoff) 1e36--no change, minted in init
    -- bat supply/borrow index is not updated, since there is no comp speed
    Assert Equal (Comptroller SashimiSupplyState slBAT "index") 1e36
    Assert Equal (Comptroller SashimiSupplyState slBAT "block") 600000
    -- neither is borrow state. block is 0 because update fn is never even called
    Assert Equal (Comptroller SashimiBorrowState slBAT "index") 1e36
    Assert Equal (Comptroller SashimiBorrowState slBAT "block") 0
    --
    Assert Equal (Comptroller SashimiSupplierIndex slBAT Coburn) 1e36
    Assert Equal (Comptroller SashimiBorrowerIndex slZRX Coburn) 6.00001e41
    Assert Equal (Erc20 SASHIMI TokenBalance Coburn) 600000e18
    Assert Equal (Comptroller SashimiAccrued Coburn) 0
    --
    Assert Equal (Comptroller SashimiSupplierIndex slBAT Geoff) 1e36
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 0
    Assert Equal (Comptroller SashimiAccrued Geoff) 0

Test "Accrue SASHIMI during a transfer"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 0
    Assert Equal (Comptroller SashimiSupplierIndex slZRX Geoff) 1e36
    Transfer Geoff Jared 2.5e10 slZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    Assert Equal (Comptroller SashimiSupplyState slZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller SashimiSupplyState slZRX "block") 300000
    Assert Equal (Comptroller SashimiSupplierIndex slZRX Geoff) 1.2000000000001e49
    --
    Assert Equal (Comptroller SashimiAccrued Jared) 0
    Assert Equal (Comptroller SashimiSupplyState slZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller SashimiSupplyState slZRX "block") 300000
    Assert Equal (Comptroller SashimiSupplierIndex slZRX Jared) 1.2000000000001e49

Test "Accrues correctly when market is added, deactivated, and activated again"
    FlywheelComptroller
    InitSpeeds
    NewSLToken DAI slDAI
    --
    Support slDAI collateralFactor:0.5
    Comptroller AddSashimiMarkets slDAI
    Assert Equal (Comptroller GetSashimiMarkets) [(Address slZRX) (Address slBAT) (Address slDAI)]
    Prep Jared Some DAI slDAI
    Mint Jared 6e18 slDAI
    EnterMarkets Geoff slZRX
    Borrow Geoff 0.5e18 slDAI
    Borrow Coburn 0.5e18 slDAI
    Comptroller RefreshSashimiSpeeds
    Assert Equal (Comptroller SashimiSpeed slZRX) 0.5e18
    Assert Equal (Comptroller SashimiSpeed slDAI) 0.5e18
    --
    FastForward 100 Blocks
    Comptroller DropSashimiMarket slDAI
    Comptroller ClaimSashimi Geoff
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 75e18--half of sldai, all of zrx(.25e18 + .5e18) * 100
    Assert Equal (Comptroller GetSashimiMarkets) [(Address slZRX) (Address slBAT)]
    Assert Equal (Comptroller SashimiSpeed slZRX) 1e18
    Assert Equal (Comptroller SashimiSpeed slDAI) 0
    --
    FastForward 100 Blocks
    Comptroller ClaimSashimi Geoff
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 175e18-- += 1e18 * 100
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    --
    Comptroller AddSashimiMarkets slDAI
    FastForward 100 Blocks
    Comptroller ClaimSashimi Geoff
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 250e18--half of sldai, all of zrx. += (.25 + .5) * 100
    Assert Equal (Comptroller SashimiAccrued Geoff) 0

Test "TransferComp handles running out of SASHIMI in Comptroller correctly"
    FlywheelComptroller price:1.0 borrowRate:0.000005 sashimiInitAmount:1e18
    InitSpeeds
    FastForward 2 Blocks
    Comptroller ClaimSashimi Geoff
    Assert Equal (Comptroller SashimiAccrued Geoff) 2e18
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 0
    Give (Address Comptroller) 1e18 SASHIMI
    Comptroller ClaimSashimi Geoff
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 2e18

Test "Changing SASHIMI rate continues to distribute at the correct speed"
    FlywheelComptroller
    InitSpeeds
    --
    Assert Equal (Comptroller SashimiSpeed slZRX) 1e18
    FastForward 10 Blocks
    Comptroller SetSashimiRate 2e18
    Assert Equal (Comptroller SashimiSpeed slZRX) 2e18
    FastForward 10 Blocks
    Comptroller ClaimSashimi Geoff
    Assert Equal (Comptroller SashimiAccrued Geoff) 0
    Assert Equal (Erc20 SASHIMI TokenBalance Geoff) 30e18
