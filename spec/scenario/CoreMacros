-- These are included in each scenario

Macro Successfully
    Invariant Success

Macro AllowFailures
    ClearInvariants Success

Macro PricedComptroller closeFactor=0.1 maxAssets=20
    Unitroller Deploy
    PriceOracle Deploy Simple
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing slEther use ListedEtherToken to replace proxy
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracleProxy Address) closeFactor maxAssets
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become

Macro NewComptroller price=1.0 closeFactor=0.1 maxAssets=20
    --g1
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing slEther use ListedEtherToken to replace proxy
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracleProxy Address) closeFactor maxAssets
    --g2
    ComptrollerImpl Deploy StandardG2 ComptrollerG2
    Unitroller SetPendingImpl ComptrollerG2
    ComptrollerImpl ComptrollerG2 BecomeG2
    --g3
    ComptrollerImpl Deploy StandardG3 ComptrollerG3
    Unitroller SetPendingImpl ComptrollerG3
    ComptrollerImpl ComptrollerG3 BecomeG3 1e18 []
    --g4
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become

Macro NewSLToken erc20 slToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=SLErc20DelegatorScenario slTokenType=SLErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    SLTokenDelegate Deploy slTokenType slErc20Delegate
    SLToken Deploy delegatorType slToken slToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (SLTokenDelegate slErc20Delegate Address) becomeImplementationData

-- Same as NewSLToken but does not deploy an ERC20. Used for special ERC20s that are initialized differently
Macro NewSLTokenBringERC20 erc20 slToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 delegatorType=SLErc20DelegatorScenario slTokenType=SLErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    SLTokenDelegate Deploy slTokenType slErc20Delegate
    SLToken Deploy delegatorType slToken slToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (SLTokenDelegate slErc20Delegate Address) becomeImplementationData

Macro NewSLTokenImmutable erc20 slToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard slTokenType=Scenario admin=Admin
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    SLToken Deploy slTokenType slToken slToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro NewEtherToken slToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    SLToken Deploy slEtherScenario slToken slToken (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro ListedSLToken erc20 slToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=SLErc20DelegatorScenario slTokenType=SLErc20DelegateScenario admin=Admin
    NewSLToken erc20 slToken borrowRate initialExchangeRate decimals tokenType delegatorType slTokenType admin
    Comptroller SupportMarket slToken

Macro ListedSLTokenImmutable erc20 slToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard slTokenType=Scenario admin=Admin
    NewSLTokenImmutable erc20 slToken borrowRate initialExchangeRate decimals tokenType slTokenType admin
    Comptroller SupportMarket slToken

Macro ListedEtherToken slToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    NewEtherToken slToken borrowRate initialExchangeRate decimals admin
    Comptroller SupportMarket slToken
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address slETH) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    Comptroller SetPriceOracle (PriceOracleProxy Address)

Macro ListedEtherTokenMinted slToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    NewEtherToken slToken borrowRate initialExchangeRate decimals admin
    Comptroller SupportMarket slToken
    CallMintEth Root 1e18 slToken

Macro SetPriceCF slToken price collateralFactor
    PriceOracle SetPrice slToken price
    Comptroller SetCollateralFactor slToken collateralFactor

Macro Give user amount erc20
    Erc20 erc20 Faucet user amount

Macro Donate token amount
    (Trx Value amount (SLToken token Donate))

Macro Prep user amount erc20 token allowanceAmount=Nothing
    Erc20 erc20 Faucet user amount
    From user (Erc20 erc20 Approve token (Default allowanceAmount amount))

Macro Allow user token
    From user (Erc20 (SLToken token Underlying) Approve token UInt256Max)

Macro AccrueInterest token
    SLToken token AccrueInterest

Macro Mint user amount token
    From user (SLToken token Mint amount)

Macro SendMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Send token amount)))

Macro CallMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (SLToken token Mint)))

Macro Redeem user amount token
    From user (SLToken token Redeem amount)

Macro RedeemEth user amount token
    Trx GasPrice 0 (From user (SLToken token Redeem amount))

Macro RedeemUnderlying user amount token
    From user (SLToken token RedeemUnderlying amount)

Macro RedeemUnderlyingEth user amount token
    Trx GasPrice 0 (From user (SLToken token RedeemUnderlying amount))

Macro BorrowEth user amount token
    Trx GasPrice 0 (From user (SLToken token Borrow amount))

Macro Borrow user amount token
    From user (SLToken token Borrow amount)

Macro RepayBorrow user amount token
    From user (SLToken token RepayBorrow amount)

Macro RepayBorrowEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (SLToken token RepayBorrow)))

Macro RepayBorrowEthMax user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Maximillion RepayBehalf user)))

Macro RepayBorrowBehalf user behalf amount token
    From user (SLToken token RepayBorrowBehalf behalf amount)

Macro RepayBorrowEthBehalf user behalf amount token
    From user (Trx GasPrice 0 (Trx Value amount (SLToken token RepayBorrowBehalf behalf)))

Macro Liquidate liquidator _ borrower amount token _ collateral
    From liquidator (SLToken token Liquidate borrower collateral amount)

Macro LiquidateEthColl liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (SLToken token Liquidate borrower collateral amount))

Macro LiquidateEthBorrow liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (Trx Value amount (SLToken token Liquidate borrower collateral)))

Macro Seize amount token caller liquidator borrower
    From caller (SLToken token Seize liquidator borrower amount)

Macro EvilSeize token amount treasure seizer seizee
    SLToken token EvilSeize treasure seizer seizee amount

Macro Support slToken collateralFactor=0.5
    Comptroller SupportMarket slToken
    Comptroller SetCollateralFactor slToken collateralFactor

Macro SetCollateralFactor slToken collateralFactor=0.5
    Comptroller SetCollateralFactor slToken collateralFactor

Macro AddReserves amount token user=Root
    From user (SLToken token AddReserves amount)

Macro ReduceReserves amount token
    SLToken token ReduceReserves amount

Macro FastForward n blocks
    Comptroller FastForward n blocks

Macro EnterMarkets user ...markets
    From user (Comptroller EnterMarkets markets)

Macro ExitMarket user market
    From user (Comptroller ExitMarket market)

Macro Transfer from to amount token
    From from (Erc20 token Transfer to amount)

Macro Cash slToken
    Read Erc20 (SLToken slToken Underlying) TokenBalance slToken

Macro QuickMint amount slToken from=Me
    Give from amount (SLToken slToken Underlying)
    Allow from slToken
    From from (SLToken slToken Mint amount)

Macro QuickBorrow amount slToken ...collateral
    From Me (Comptroller EnterMarkets collateral)
    From Me (Comptroller EnterMarkets (slToken))
    From Me (SLToken slToken Borrow amount)

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the erc20 market
Macro BorrowAndRepayWithInterest erc20 slToken amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    SLToken slToken SetInterestRateModel (InterestRateModel Std Address)
    SLToken slToken SetReserveFactor reserveRate
    ListedSLToken COLLAT slCOLLAT
    Comptroller SetCollateralFactor slCOLLAT 0.9
    Prep Torrey 1e30 COLLAT slCOLLAT
    Mint Torrey 1e30 slCOLLAT
    EnterMarkets Torrey slCOLLAT slToken
    Assert True (Comptroller CheckMembership Torrey slCOLLAT)
    Assert True (Comptroller CheckMembership Torrey slToken)
    Borrow Torrey amount slToken
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (SLToken BorrowBalance Torrey) slToken
    From Torrey (Erc20 erc20 Approve slToken amount)
    RepayBorrow Torrey amount slToken
    From Torrey (Erc20 erc20 Approve slToken interestAmount)
    Give Torrey interestAmount erc20
    RepayBorrow Torrey interestAmount slToken
    Assert Equal (SLToken slToken BorrowBalance Torrey) Zero

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the ether market
Macro BorrowAndRepayEthWithInterest slEther amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    SLToken slEther SetInterestRateModel (InterestRateModel Std Address)
    SLToken slEther SetReserveFactor reserveRate
    ListedSLToken COLLAT slCOLLAT
    Comptroller SetCollateralFactor slCOLLAT 0.9
    Prep Torrey 1e30 COLLAT slCOLLAT
    Mint Torrey 1e30 slCOLLAT
    EnterMarkets Torrey slCOLLAT slEther
    Assert True (Comptroller CheckMembership Torrey slCOLLAT)
    Assert True (Comptroller CheckMembership Torrey slEther)
    Borrow Torrey amount slEther
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (SLToken BorrowBalance Torrey) slEther
    RepayBorrowEth Torrey amount slEther
    RepayBorrowEth Torrey interestAmount slEther
    Assert Equal (SLToken slEther BorrowBalance Torrey) Zero
