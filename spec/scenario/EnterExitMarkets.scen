-- Enter and Exit Markets Tests

Test "Enter Markets Idempotent"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	Assert Equal (Comptroller AssetsIn Geoff) []
	ListedSLToken ZRX slZRX
	EnterMarkets Geoff slZRX
	Assert Log MarketEntered (slToken (Address slZRX)) (account (Address Geoff))
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff slZRX)
	ListedSLToken OMG slOMG
	EnterMarkets Geoff slZRX slOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff slZRX)
	Assert True (Comptroller CheckMembership Geoff slOMG)
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX) (Address slOMG)]

Test "Entered Market Must Be Supported"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedSLToken ZRX slZRX
	EnterMarkets Geoff slZRX
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	NewSLToken OMG slOMG
	EnterMarkets Geoff slZRX slOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff slZRX)
	Assert False (Comptroller CheckMembership Geoff slOMG)
	Support slOMG
	EnterMarkets Geoff slZRX slOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff slZRX)
	Assert True (Comptroller CheckMembership Geoff slOMG)

Test "Cannot enter Markets beyond max assets"
	NewComptroller
	Comptroller SetMaxAssets 1
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedSLToken ZRX slZRX
	ListedSLToken OMG slOMG
	EnterMarkets Geoff slZRX slOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff slZRX)
	Assert False (Comptroller CheckMembership Geoff slOMG)

Test "Exit single market"
	NewComptroller
	ListedSLToken ZRX slZRX
	EnterMarkets Geoff slZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX)]
	ExitMarket Geoff slZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit non-entered market"
	NewComptroller
	ListedSLToken ZRX slZRX
	ExitMarket Geoff slZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit one of two market from the front"
	NewComptroller
	ListedSLToken ZRX slZRX
	ListedSLToken OMG slOMG
	EnterMarkets Geoff slZRX slOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX) (Address slOMG)]
	ExitMarket Geoff slZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slOMG)]

Test "Exit one of two market from the back"
	NewComptroller
	ListedSLToken ZRX slZRX
	ListedSLToken OMG slOMG
	EnterMarkets Geoff slZRX slOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX) (Address slOMG)]
	ExitMarket Geoff slOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX)]

Test "Exit multiple markets"
	NewComptroller
	ListedSLToken ZRX slZRX
	ListedSLToken OMG slOMG
	ListedSLToken BAT slBAT
	ListedSLToken REP slREP
	ListedSLToken DAI slDAI
	EnterMarkets Geoff slZRX slOMG slBAT slREP slDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX) (Address slOMG) (Address slBAT) (Address slREP) (Address slDAI)]
	ExitMarket Geoff slZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slDAI) (Address slOMG) (Address slBAT) (Address slREP)]
	ExitMarket Geoff slREP
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slDAI) (Address slOMG) (Address slBAT)]
	ExitMarket Geoff slOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slDAI) (Address slBAT)]
	ExitMarket Geoff slDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slBAT)]
	ExitMarket Geoff slBAT
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Realistic Market Scenario"
	PricedComptroller
	ListedSLToken ZRX slZRX
	SetPriceCF slZRX 0.002 0.4
	ListedEtherToken slETH
	Comptroller SetCollateralFactor slETH 0.8
	ListedSLToken BAT slBAT
	SetPriceCF slBAT 0.0015 0.3
	-- Mint some slZRX and slETH
	Prep Geoff 1250e18 ZRX slZRX
	Mint Geoff 1250e18 slZRX -- Liquidity -> 0.4 * 0.002 * 1250e18 = 1.0e18
	SendMintEth Geoff 2.5e18 slETH -- Liqiuidity -> 0.8 * 1.0 * 2.5e18 = 2.0e18
	-- Check liquidity is zero when not in any markets
	Assert Equal (Comptroller Liquidity Geoff) Zero
	-- Enter ZRX and check liquidity
	EnterMarkets Geoff slZRX
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18
	-- Fail to borrow BAT due to liquidity
	Give slBAT 1000e18 BAT
	HoldInvariants
	Borrow Geoff 1000e18 slBAT -- 1000e18 * 0.0015 = 1.5e18 required liquidity
							  -- But since we're only in ZRX, we only have 1.0e18 liquidity
	Assert Failure COMPTROLLER_REJECTION BORROW_COMPTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
	-- Enter slETH and check liquidity
	EnterMarkets Geoff slETH
	Assert Equal (Comptroller Liquidity Geoff) 3.0e18 -- Sum of slETH and slZRX liquidity from above
	-- Borrow previous BAT amount given liquidity
	Borrow Geoff 1000e18 slBAT
	Assert Equal (Comptroller Liquidity Geoff) 1.5e18 -- Less the borrow amount's toll
	-- Try to exit a eth market but fail due to given borrow requiring eth as collateral
	HoldInvariants
	ExitMarket Geoff slETH
	Assert Failure REJECTION EXIT_MARKET_REJECTION INSUFFICIENT_LIQUIDITY -- Liquidity check fails
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX) (Address slBAT) (Address slETH)]
	-- Repay some borrow and exit market OMG
	Allow Geoff slBAT
	RepayBorrow Geoff 500e18 slBAT
	Assert Equal (Comptroller Liquidity Geoff) 2.25e18 -- With 0.75e18 repaid
	ExitMarket Geoff slETH
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX) (Address slBAT)]
	Assert Equal (Comptroller Liquidity Geoff) 0.25e18 -- Less Eth's 2.0e18 collateral weight
	-- Try and exit slBAT (firist without, then after, repaying)
	HoldInvariants
	ExitMarket Geoff slBAT
	Assert Failure NONZERO_BORROW_BALANCE EXIT_MARKET_BALANCE_OWED
	RepayBorrow Geoff UInt256Max slBAT
	ExitMarket Geoff slBAT
	Assert Equal (Comptroller AssetsIn Geoff) [(Address slZRX)]
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18 -- Back to just slZRX
	-- Exit slZRX
	ExitMarket Geoff slZRX
	Assert Equal (Comptroller AssetsIn Geoff) []
	Assert Equal (Comptroller Liquidity Geoff) 0e18 -- Back to nothing
